<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Tic-Tac-Toe</title>
  <style>
    :root { --size: 100px; --line: 4px; --primary: #2c3e50; }
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body {
      font-family: Arial, sans-serif; display: flex; flex-direction: column;
      align-items: center; justify-content: center; min-height: 100vh;
      background: #f5f7fa; color: var(--primary);
    }
    h1 { margin-bottom: 20px; }
    #board {
      display: grid; grid-template-columns: repeat(3, var(--size));
      grid-template-rows: repeat(3, var(--size));
      gap: var(--line); background: var(--primary);
    }
    .cell {
      width: var(--size); height: var(--size); background: #fff;
      display: flex; align-items: center; justify-content: center;
      font-size: 2.6rem; cursor: pointer; user-select: none;
    }
    .cell:hover { background: #ecf0f3; }
    #status { margin: 16px 0; font-size: 1.2rem; min-height: 1.4em; }
    button { padding: 10px 22px; border: none; border-radius: 6px;
      background: var(--primary); color: #fff; font-size: 1rem; cursor: pointer;
      transition: opacity 0.2s;
    }
    button:hover { opacity: 0.9; }
  </style>
</head>
<body>

  <h1>Tic-Tac-Toe</h1>
  <div id="board"></div>
  <div id="status"></div>
  <button id="restartBtn" hidden>Play Again</button>

  <script>
    // --- Game Variables ---
    const boardElement = document.getElementById('board');
    const statusEl     = document.getElementById('status');
    const restartBtn   = document.getElementById('restartBtn');
    let board = Array(9).fill(null);      // 0-based index array
    let currentPlayer = 'X';
    let gameActive = true;

    // --- Winning Combinations ---
    const wins = [
      [0,1,2],[3,4,5],[6,7,8],  // rows
      [0,3,6],[1,4,7],[2,5,8],  // columns
      [0,4,8],[2,4,6]           // diagonals
    ];

    // --- Create Grid Cells ---
    boardElement.innerHTML = '';
    board.forEach((_, idx) => {
      const cell = document.createElement('div');
      cell.className = 'cell';
      cell.dataset.index = idx;
      boardElement.appendChild(cell);
    });

    // --- Event Listener for Moves ---
    boardElement.addEventListener('click', e => {
      const idx = e.target.dataset.index;
      if (!gameActive || !idx || board[idx]) return;

      board[idx] = currentPlayer;
      e.target.textContent = currentPlayer;

      if (checkWin(currentPlayer)) {
        statusEl.textContent = `🎉 ${currentPlayer} wins!`;
        endGame();
      } else if (board.every(Boolean)) {
        statusEl.textContent = '🤝 Draw!';
        endGame();
      } else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        statusEl.textContent = `Player ${currentPlayer}'s turn`;
      }
    });

    restartBtn.addEventListener('click', resetGame);

    // --- Helper Functions ---
    function checkWin(player) {
      return wins.some(combo => combo.every(i => board[i] === player));
    }
    function endGame() {
      gameActive = false;
      restartBtn.hidden = false;
    }
    function resetGame() {
      board.fill(null);
      document.querySelectorAll('.cell').forEach(c => c.textContent = '');
      currentPlayer = 'X';
      gameActive = true;
      statusEl.textContent = `Player ${currentPlayer}'s turn`;
      restartBtn.hidden = true;
    }

    // initial message
    statusEl.textContent = `Player ${currentPlayer}'s turn`;
  </script>
</body>
</html>ss